#!/usr/bin/env bash

#
# Options
#

# Set to binary to install binary (faster) or build to build from source (requires npm)
DOWNLOAD_METHOD="binary"
# This is where glasscordctl looks for discord config folders, if multiple ones are found the last one is used.
DISCORD_PATHS=("${HOME}/.var/app/com.discordapp.Discord/config/discord" "${HOME}/snap/discord/current/.config/discord" "${HOME}/.config/discord" )

#
# Internal vars
#
VERSION=0.0.2
# DISCORD_PATH="`get_discord_path`" has to be run after function is defined
GLASSCORD_PATH="${HOME}/.config/glasscord"
USED_DISCORD_VERSION_FILE="${GLASSCORD_PATH}/used_discord_version"
GLASSCORD_VERSION_FILE="${GLASSCORD_PATH}/glasscord_version"
USED_DISCORD_PATH_FILE="${GLASSCORD_PATH}/used_discord_path"
HELPMSG="glasscordctl version ${VERSION}

options:

    ===========================================================
    | Functionality             | Word / flag alternatives    |
    ===========================================================
    | Install Glasscord:        | install    --install    -I  |
    | Update your installation: | update     --update     -U  |
    | Uninstall Glasscord:      | uninstall  --uninstall  -R  |
    | Reinstall Glasscord:      | reinstall  --reinsatll  -r  |
    | Print this message:       | help       --help       -h  |
    | Print the version:        | version    --version    -v  |
    | Print info:               | info       --info       -i  |
    ==========================================================="

#
# Info retrieval functions
#
latest_release_link () {
	curl "https://api.github.com/repos/AryToNex/Glasscord/releases/latest" -s | awk '/browser_download_url/ { print $2 }' | cut -d '"' -f 2
}

latest_zip_link () {
	curl "https://api.github.com/repos/AryToNex/Glasscord/releases/latest" -s | awk '/zipball_url/ { print $2 }' | cut -d '"' -f 2
}

latest_glasscord_version () {
	curl "https://api.github.com/repos/AryToNex/Glasscord/releases/latest" -s | awk '/tag_name/ { print $2 }' | cut -d '"' -f 2
}

used_glasscord_version () {
	cat "${GLASSCORD_VERSION_FILE}"
}

used_discord_path () {
	used_path=""
	for path in "${DISCORD_PATHS[@]}"; do
		[ -d "${path}" ] && used_path="${path}"
	done
	[ -z "${used_path}" ] && {
		echo "No discord folder detected in ${DISCORD_PATHS[@]}, are you sure you have discord installed?"
		exit
	}
	echo "${used_path}"
}

DISCORD_PATH="`used_discord_path`"

discord_versions () {
	ls "${DISCORD_PATH}" | awk '/[0-9]+\.[0-9]+\.[0-9]+/ { print $1 }'
}

latest_discord_version () {
	discord_versions | sort -nr | sed "1q"
}

used_discord_version () {
	cat "${USED_DISCORD_VERSION_FILE}"
}

#
# Internal functions
#
check_deps () {
	which curl &>/dev/null || {
		echo "Please install curl"
		missing="curl"
	}
	which awk &>/dev/null || {
		echo "Please install awk"
		missing="${missing} awk"
	}
	which sed &>/dev/null || {
		echo "Please install sed"
		missing="${missing} sed"
	}
	if [[ "${DOWNLOAD_METHOD}" == "build" ]]; then
		which npm &>/dev/null || {
			echo "Please install npm for building from source"
			missing="${missing} sed"
		}
	fi
	[ -z "${missing}" ] || exit
}

check_network () {
	[ -z "`curl -s duckduckgo.com`" ] && {
		echo "Please make sure you are connected to the internet and try again."
		exit
	}
}

download_asar () {
	case "${DOWNLOAD_METHOD}" in
		build)
			curl `latest_zip_link` -sLo "/tmp/glasscord.zip" &&\
				cd /tmp &&\
				unzip "/tmp/glasscord.zip" &&\
				cd "`ls | grep 'AryToNeX-Glasscord'`" &&\
				npm install &&\
				mv "./glasscord.asar" "${1}" &&\
				cd ..
			rm "/tmp/glasscord.zip" "`ls | grep 'AryToNeX-Glasscord'`" -rf
			;;
		*)
			curl `latest_release_link` -sLo "${1}"
			;;
	esac
}

install_to () {
	newdir=`find "${DISCORD_PATH}/${1}" -type d -name "discord_desktop_core" | sed "1q"`
	echo "require('${GLASSCORD_PATH}/glasscord.asar')" | cat - "${newdir}/index.js" > "/tmp/index.js"
	cat "/tmp/index.js" > "${newdir}/index.js"
	rm "/tmp/index.js"
}

uninstall_from () {
	newdir=`find "${DISCORD_PATH}/${1}" -type d -name "discord_desktop_core" | sed "1q"`
	sed -i "/glasscord/d" "${newdir}/index.js"
}

update () {
	if [ ! -d "${GLASSCORD_PATH}" ]; then
		echo "Can't update before install"
		return
	fi

	if [[ `used_discord_version` != `latest_discord_version` ]]; then
		echo "Installing for latest discord version"
		install_to `latest_discord_version`
	else
		echo "Already installed for latest discord version"
	fi

	if [[ `used_glasscord_version` != `latest_glasscord_version` ]]; then
		echo "Downloading latest release of Glasscord."
		curl `latest_release_link` -sLo "${GLASSCORD_PATH}/glasscord.asar"
	    [ ! -f "${GLASSCORD_PATH}/glasscord.asar" ] && {
			echo "Update failed, if you can no longer launch the older version, please uninstall and install Glasscord"
			exit
		}
		echo `latest_glasscord_version` > "${GLASSCORD_VERSION_FILE}"
		echo "Updated Glasscord"
	else
		echo "Already installed latest Glasscord version."
	fi
}

install () {
	if [ ! -d "${DISCORD_PATH}" ]; then
		echo "Your discord directory doesn't seem to exist, if you are sure you have discord installed, please find it's config directory, then edit the variable called 'DISCORD_PATH' at the top of this file to match it"
		exit
	fi

	if [ ! -d "${GLASSCORD_PATH}" ]; then
		echo "Starting install"
		mkdir -p "${GLASSCORD_PATH}"
		download_asar "${GLASSCORD_PATH}/glasscord.asar"
	    [ ! -f "${GLASSCORD_PATH}/glasscord.asar" ] && {
			echo "Installation failed, removing files."
			uninstall
			exit
		}
		install_to `latest_discord_version`
		latest_discord_version > "${USED_DISCORD_VERSION_FILE}"
		latest_glasscord_version > "${GLASSCORD_VERSION_FILE}"
		echo "Successfully installed Glasscord"
	else
		echo "Already installed"
	fi
}

uninstall () {
	if [ -d "${GLASSCORD_PATH}" ]; then
		for version in `discord_versions`; do
			uninstall_from "${version}"
		done
		rm "${GLASSCORD_PATH}" -rf
		echo "Successfully uninstalled Glasscord"
	else
		echo "Glasscord is not installed"
	fi
}

check_deps

#
# Args
#
case "${1}" in
	update|--update|-U)
		check_network
		update
		;;
	install|--install|-I)
		check_network
		install
		;;
	uninstall|--uninstall|-R)
		uninstall
		;;
	reinstall|--reinsatll|-r)
		check_network
		uninstall
		install
		;;
	help|--help|-h)
		echo -e "${HELPMSG}"
		;;
	version|--version|-v)
		echo -e "${VERSION}"
		;;
	info|--info|-i)
		if [ -d ${GLASSCORD_PATH} ]; then
			echo -e "Discord version: `used_discord_version`\nGlasscord version: `used_glasscord_version`\nDownload option: ${DOWNLOAD_METHOD}\nDiscord directory: ${DISCORD_PATH}"
		else
			echo "Glasscord is not installed"
		fi
		;;
	--debug)
		$2
		;;
	*)
		echo -e "${HELPMSG}"
		exit 1
		;;
esac
